# DevOps-Lab V1.6.5
# Made by Wras - Cristian C.

version: '3.9'

networks:
  frontend_net:
    ipam:
      config:
        - subnet: 10.0.0.0/24
  backend_net:
    ipam:
      config:
        - subnet: 10.1.0.0/24
  db_net:
    ipam:
      config:
        - subnet: 10.2.0.0/24
  cicd_net:
    ipam:
      config:
        - subnet: 10.3.0.0/24
  monitoring_net:
    ipam:
      config:
        - subnet: 10.4.0.0/24
  mgmt_net:
    ipam:
      config:
        - subnet: 10.5.0.0/24
  mail_net:
    ipam:
      config:
        - subnet: 10.6.0.0/24
  openvpn_net:
    ipam:
      config:
        - subnet: 10.10.0.0/24

services:
  
  # OpenVPN Server
  openvpn:
    container_name: openvpn
    image: ubuntu
    tty: true
    networks:
      openvpn_net:
        ipv4_address: 10.10.0.10
    command: tail -f /dev/null

  # DNS Server (CoreDNS)
  dnsserver:
    container_name: dnsserver
    image: ubuntu
    tty: true
    networks:
      backend_net:
        ipv4_address: 10.1.0.5
    command: tail -f /dev/null

  # Email Server (MailDev for testing)
  mailserver:
    container_name: mailserver
    image: ubuntu
    tty: true
    networks:
      mail_net:
        ipv4_address: 10.6.0.10
    command: tail -f /dev/null

  # Management UI
    # Portainer
  portainer:
    container_name: portainer
    image: portainer/portainer-docker-extension:2.27.6
    tty: true
    networks:
      mgmt_net:
        ipv4_address: 10.5.0.210
      frontend_net:
        ipv4_address: 10.0.0.210
    ports:
      - 9443:9443
  #  volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock
  # Jump Server (SSH enabled Ubuntu)

  # CI/CD Tools
    # Jenkins
  jenkins:
    container_name: jenkins
    image: jenkins/jenkins
    tty: true
    networks:
      cicd_net:
        ipv4_address: 10.3.0.10
  
  # Monitoring
    # Grafana
  grafana:
    container_name: grafana
    image: grafana/grafana
    tty: true
    networks:
      monitoring_net:
        ipv4_address: 10.4.0.10
      backend_net:
        ipv4_address: 10.1.0.200
      frontend_net:
        ipv4_address: 10.0.0.200
    ports: 
      - 3005:3000
    #command: tail -f /dev/null
    
    # Prometeus
  prometheus:
    image: ubuntu
    tty: true
    networks:
      monitoring_net:
        ipv4_address: 10.4.0.11
      backend_net:
        ipv4_address: 10.1.0.201
      frontend_net:
        ipv4_address: 10.0.0.201
    expose:
      - "9090"
    command: tail -f /dev/null

  # Web Servers / Frontend (HTTPS reverse proxy to all internal apps)

    # Nginx container
  webserver:
    container_name: nginx
    image: nginx
    tty: true
    depends_on:
      - tomcat-1-dev
      - tomcat-1-test
      - tomcat-1-prod
    networks:
      frontend_net:
        ipv4_address: 10.0.0.10
    ports:
      - 8080:80
      - 8443:443
    command: tail -f /dev/null
  
    # Tomcat containers
    # TOMCAT DOCKERFILES
    
  tomcat-dockerfile:
    build:
      context: ./Containers
      dockerfile: Docker_files/Tomcat.Dockerfile
    image: custom-tomcat:1.0
    container_name: tomcat-1-df
    tty: true
    networks:
      backend_net:
        ipv4_address: 10.1.0.55
    ports:
      - 8081:8080
    volumes:
      - ./Tomcat/Tomcat-1-dev/Certs:/usr/local/tomcat/conf/certs
      - ./Tomcat/Tomcat-1-dev/webapps:/usr/local/tomcat/webapps
      - ./Tomcat/Tomcat-1-dev/Configurations:/usr/local/tomcat/conf
      - ./Tomcat/Tomcat-1-dev/Scripts:/usr/local/bin/scripts
      - ./Tomcat/Tomcat-1-dev/Volumes:/app/data
    #expose:
    #  - "8443"
    #command: tail -f /dev/null
    restart: unless-stopped

      # Tomcat dev enviroment
  tomcat-1-dev:
    container_name: tomcat-1-dev
    image: tomcat
    tty: true
    depends_on:
      - postgres-dev
    networks:
      backend_net:
        ipv4_address: 10.1.0.20
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: '0.5'

    command: tail -f /dev/null

      # Tomcat testing enviroment
  tomcat-1-test:
    container_name: tomcat-1-test
    image: tomcat
    tty: true
    depends_on:
      - postgres-test
    networks:
      backend_net:
        ipv4_address: 10.1.0.21
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: '0.5'
    command: tail -f /dev/null

      # Tomcat production enviroment
  tomcat-1-prod:
    container_name: tomcat-1-prod
    image: tomcat
    tty: true
    depends_on:
      - postgres-prod
    networks:
      backend_net:
        ipv4_address: 10.1.0.22
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: '0.5'
    command: tail -f /dev/null

    # Databases (Private)

      # DB for Prod env
  postgres-prod:
    container_name: postgresql-main
    image: postgres
    tty: true
    networks:
      db_net:
        ipv4_address: 10.2.0.10
    command: tail -f /dev/null

      # DB for test env
  postgres-test:
    container_name: postgresql-test
    image: postgres
    tty: true
    networks:
      db_net:
        ipv4_address: 10.2.0.100
    command: tail -f /dev/null

  postgres-dev:
    container_name: postgresql-dev
    image: postgres
    tty: true
    networks:
      db_net:
        ipv4_address: 10.2.0.111
    command: tail -f /dev/null

  # Dev Images
  ubuntu:
    container_name: dev1
    image: ubuntu
    tty: true
    networks:
      backend_net:
        ipv4_address: 10.1.0.100
    command: tail -f /dev/null

  alpine:
    container_name: dev2
    image: alpine
    tty: true
    networks:
      backend_net:
        ipv4_address: 10.1.0.101
    command: tail -f /dev/null

  jumpserver:
    container_name: jumpserver
    image: ubuntu
    tty: true
    networks:
      backend_net:
        ipv4_address: 10.1.0.2
      frontend_net:
        ipv4_address: 10.0.0.2
      cicd_net:
        ipv4_address: 10.3.0.2
      db_net:
        ipv4_address: 10.2.0.2
      monitoring_net:
        ipv4_address: 10.4.0.2
      mgmt_net:
        ipv4_address: 10.5.0.2
      mail_net:
        ipv4_address: 10.6.0.2
      openvpn_net:
        ipv4_address: 10.10.0.2
    command: tail -f /dev/null